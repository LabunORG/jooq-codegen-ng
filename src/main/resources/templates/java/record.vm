package $package;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record${table.primaryKey.columns.size()};
import org.jooq.Record${table.columns.size()};
import org.jooq.Row${table.columns.size()};
import org.jooq.impl.UpdatableRecordImpl;

/**
* This class is generated by jooq-generator.
*/
@Generated({"jooq-generator:"})
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class $className extends UpdatableRecordImpl<$className> implements Record${table.columns.size()}<#foreach($column in ${table.columns})${column.javaType}#if( $foreach.hasNext ), #end#end> {


#foreach( $column in $columns )
  /**
  * Setter for <code>$schema.name.$table.name.$column.name</code>
  */
  public $className ${column.setterName}($column.javaType value) {
    set($foreach.index, value);
    return this;
  }

  /**
  * Getter for <code>$schema.name.$table.name.$column.name</code>.
  */
  public $column.javaType ${column.getterName}() {
    return ($column.javaType) get($foreach.index);
  }

#end

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  /**
  * {@inheritDoc}
  */
  @Override
  public Record${table.primaryKey.columns.size()}<#foreach($column in ${table.primaryKey.columns})${column.javaType}#if( $foreach.hasNext ), #end#end> key() {
    return (Record${table.primaryKey.columns.size()}) super.key();
  }

  // -------------------------------------------------------------------------
  // Record${table.columns.size()} type implementation
  // -------------------------------------------------------------------------

  /**
  * {@inheritDoc}
  */
  @Override
  public Row${table.columns.size()}<#foreach($column in ${table.columns})${column.javaType}#if( $foreach.hasNext ), #end#end> fieldsRow() {
    return (Row${table.columns.size()}) super.fieldsRow();
  }

  /**
  * {@inheritDoc}
  */
  @Override
  public Row${table.columns.size()}<#foreach($column in ${table.columns})${column.javaType}#if( $foreach.hasNext ), #end#end> valuesRow() {
    return (Row${table.columns.size()}) super.valuesRow();
  }

  #foreach( $column in $columns )
  #set($index = ${foreach.index} + 1)
  /**
  * {@inheritDoc}
  */
  @Override
  public Field<${column.javaType}> field$index() {
    return ${table.canonicalTableClassName}.${table.name.toUpperCase()}.${column.name.toUpperCase()};
  }
  #end

  #foreach( $column in $columns )
  #set($index = ${foreach.index} + 1)
  /**
  * {@inheritDoc}
  */
  @Override
  public ${column.javaType} component$index() {
    return ${column.getterName}();
  }
  #end

  #foreach( $column in $columns )
    #set($index = ${foreach.index} + 1)
  /**
  * {@inheritDoc}
  */
  @Override
  public ${column.javaType} value$index() {
    return ${column.getterName}();
  }
  #end

  #foreach( $column in $columns )
    #set($index = ${foreach.index} + 1)
  /**
  * {@inheritDoc}
  */
  @Override
  public ${className} value$index($column.javaType value) {
    ${column.setterName}(value);
    return this;
  }
  #end

  /**
  * {@inheritDoc}
  */
  @Override
  public ${className} values(#foreach($column in ${table.columns})#set($index = ${foreach.index} + 1)${column.javaType} value${index}#if( $foreach.hasNext ), #end#end) {
    #foreach( $column in $columns )
      #set($index = ${foreach.index} + 1)
    value${index}(value${index});
    #end
    return this;
  }


  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  /**
  * Create a detached ${className}
  */
  public $className() {
    super(${table.canonicalTableClassName}.${table.name.toUpperCase()});
  }

  /**
  * Create a detached, initialised ${className}
  */
  public ${className}(#foreach($column in ${table.columns})#set($index = ${foreach.index} + 1)${column.javaType} value${index}#if( $foreach.hasNext ), #end#end) {
    super(${table.canonicalTableClassName}.${table.name.toUpperCase()});

    #foreach( $column in $columns )
      #set($index = ${foreach.index} + 1)
    set(${foreach.index}, value${index});
    #end
  }
}
