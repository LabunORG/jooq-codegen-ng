package ${package};

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;

import javax.annotation.Generated;


/**
* This class is generated by jooq-generator.
*/
@Generated({"jooq-generator:"})
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public final class $className {

// -------------------------------------------------------------------------
// IDENTITY definitions
// -------------------------------------------------------------------------

#foreach( $identity in $identities )
  public static Identity<${identity.table.canonicalRecordClassName}, ${identity.column.javaType}> IDENTITY_${identity.table.name.toUpperCase()} = Identities.IDENTITY_${identity.table.name.toUpperCase()};
#end

// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

#foreach( $uniqKey in $uniqKeys )
  public static final UniqueKey<${uniqKey.table.canonicalRecordClassName}> ${uniqKey.name.toUpperCase()} = UniqueKeys.${uniqKey.name.toUpperCase()};
#end

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

#foreach( $foreignKey in $foreignKeys )
  public static final ForeignKey<${foreignKey.table.canonicalRecordClassName}, ${foreignKey.refKey.table.canonicalRecordClassName}> ${foreignKey.name.toUpperCase()} = ForeignKeys.${foreignKey.name.toUpperCase()};
#end

// -------------------------------------------------------------------------

  private static class Identities extends AbstractKeys {
  #foreach( $identity in $identities )
    public static Identity<${identity.table.canonicalRecordClassName}, ${identity.column.javaType}> IDENTITY_${identity.table.name.toUpperCase()} = createIdentity(${identity.table.canonicalTableClassName}.${identity.table.name.toUpperCase()}, ${identity.table.canonicalTableClassName}.${identity.table.name.toUpperCase()}.${identity.column.name.toUpperCase()});
  #end
  }

  private static class UniqueKeys extends AbstractKeys {
  #foreach( $uniqKey in $uniqKeys )
    public static final UniqueKey<${uniqKey.table.canonicalRecordClassName}> ${uniqKey.name.toUpperCase()} = createUniqueKey(${uniqKey.table.canonicalTableClassName}.${uniqKey.table.name.toUpperCase()}, "${uniqKey.name}"#foreach( $uniqKeyColumn in $uniqKey.columns ), ${uniqKey.table.canonicalTableClassName}.${uniqKey.table.name.toUpperCase()}.${uniqKeyColumn.name.toUpperCase()}#end);
  #end
  }

  private static class ForeignKeys extends AbstractKeys {
  #foreach( $foreignKey in $foreignKeys )
    public static final ForeignKey<${foreignKey.table.canonicalRecordClassName}, ${foreignKey.refKey.table.canonicalRecordClassName}> ${foreignKey.name.toUpperCase()} = createForeignKey(UniqueKeys.${foreignKey.refKey.name}, ${foreignKey.table.canonicalTableClassName}.${foreignKey.table.name.toUpperCase()}, "${foreignKey.name}"#foreach( $foreignKeyColumn in $foreignKey.columns ), ${foreignKey.table.canonicalTableClassName}.${foreignKey.table.name.toUpperCase()}.${foreignKeyColumn.name.toUpperCase()}#end);
  #end
  }

}