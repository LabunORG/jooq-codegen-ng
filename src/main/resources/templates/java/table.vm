package ${package};

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
* This class is generated by jooq-generator.
*/
@Generated({"jooq-generator:"})
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class $className extends TableImpl<$table.canonicalRecordClassName> {

/**
* The reference instance of <code>$schema.name.$table.name</code>
*/
public static final $className $table.name.toUpperCase() = new $className();

  /**
  * The class holding records for this type
  */
  @Override
  public Class<$table.canonicalRecordClassName> getRecordType() {
    return ${table.canonicalRecordClassName}.class;
  }

  /**
  * Create an aliased <code>$schema.name.$table.name</code> table reference
  */
  public $className() {
    this(DSL.name("$table.name"), null);
  }

  /**
  * Create an aliased <code>$schema.name.$table.name</code> table reference
  */
  public $className(String alias) {
    this(DSL.name(alias), $table.name.toUpperCase());
  }

  /**
  * Create an aliased <code>$schema.name.$table.name</code> table reference
  */
  public $className(Name alias) {
    this(alias, $table.name.toUpperCase());
  }

  private $className(Name alias, Table<$table.canonicalRecordClassName> aliased) {
    this(alias, aliased, null);
  }

  private $className(Name alias, Table<$table.canonicalRecordClassName> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, "");
  }

#foreach( $column in $columns )
  /**
  * The column <code>$schema.name.$table.name.$column.name</code>.
  */
  public final TableField<${table.canonicalRecordClassName}, $column.javaType> $column.name.toUpperCase() = createField("$column.name", $column.sqlType, this, "");

#end

  /**
  * {@inheritDoc}
  */
  @Override
  public Schema getSchema() {
    return ${schema.canonicalSchemaClassName}.${schema.name.toUpperCase()};
  }

  /**
  * {@inheritDoc}
  */
  @Override
  public $className as(String alias) {
    return new $className(DSL.name(alias), this);
  }

  /**
  * {@inheritDoc}
  */
  @Override
  public $className as(Name alias) {
    return new $className(alias, this);
  }

  /**
  * Rename this table
  */
  @Override
  public $className rename(String name) {
    return new $className(DSL.name(name), null);
  }

  /**
  * Rename this table
  */
  @Override
  public $className rename(Name name) {
    return new $className(name, null);
  }

  /**
  * {@inheritDoc}
  */
  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(#foreach($index in $table.indexes)${table.schema.canonicalIndexesClassName}.${index.name.toUpperCase()}#if($foreach.hasNext), #end#end);
  }

  #if(${table.identity})
  /**
  * {@inheritDoc}
  */
  @Override
  public Identity<${table.canonicalRecordClassName}, ${table.identity.column.javaType}> getIdentity() {
    return ${table.schema.canonicalKeysClassName}.IDENTITY_${table.name.toUpperCase()};
  }
  #end

  #if(${table.primaryKey})
  /**
  * {@inheritDoc}
  */
  @Override
  public UniqueKey<${table.canonicalRecordClassName}> getPrimaryKey() {
    return ${table.schema.canonicalKeysClassName}.${table.primaryKey.name.toUpperCase()};
  }
  #end

  /**
  * {@inheritDoc}
  */
  @Override
  public List<UniqueKey<${table.canonicalRecordClassName}>> getKeys() {
    return Arrays.<UniqueKey<${table.canonicalRecordClassName}>>asList(#foreach($key in $table.uniqKeys)${table.schema.canonicalKeysClassName}.${key.name.toUpperCase()}#if($foreach.hasNext), #end#end);
  }

  /**
  * {@inheritDoc}
  */
  @Override
  public List<ForeignKey<${table.canonicalRecordClassName}, ?>> getReferences() {
    return Arrays.<ForeignKey<${table.canonicalRecordClassName}, ?>>asList(#foreach($foreignKey in $table.foreignKeys)${table.schema.canonicalKeysClassName}.${foreignKey.name.toUpperCase()}#if($foreach.hasNext), #end#end);
  }
}