package ${package};

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import javax.annotation.Generated;

/**
 * This class is generated by jooq-codegen-ng.
 */
@Generated({"jooq-codegen-ng:"})
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class $className extends TableImpl<$recordClassName> {

    /**
     * The reference instance of <code>$schema.name.$table.name</code>
     */
    public static final $className $table.name.toUpperCase() = new $className();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<$recordClassName> getRecordType() {
        return ${recordClassName}.class;
    }

    /**
     * Create a <code>$schema.name.$table.name</code> table reference
     */
    public $className() {
        this("$table.name", null);
    }

    /**
     * Create an aliased <code>$schema.name.$table.name</code> table reference
     */
    public $className(String alias) {
        this(alias, $table.name.toUpperCase());
    }

    private $className(String alias, Table<$recordClassName> aliased) {
        this(alias, aliased, null);
    }

    private $className (String alias, Table<$recordClassName> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    #foreach( $column in $columns )
    /**
     * The column <code>$schema.name.$table.name.$column.name</code>.
     */
    public final TableField<$recordClassName, $column.javaType> $column.name.toUpperCase() = createField("$column.name", $column.sqlType, this, "");

    #end
}